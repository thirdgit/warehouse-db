-- MySQL Script generated by MySQL Workbench
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema warehouse
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema warehouse
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `warehouse` DEFAULT CHARACTER SET utf8 ;
USE `warehouse` ;

-- -----------------------------------------------------
-- Table `warehouse`.`clients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`clients` (
  `client_id` INT NOT NULL AUTO_INCREMENT,
  `client_name` TEXT NOT NULL,
  `client_phone` TEXT NOT NULL,
  `client_address` TEXT NOT NULL,
  PRIMARY KEY (`client_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `warehouse`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`orders` (
  `order_id` INT NOT NULL AUTO_INCREMENT,
  `order_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `order_amount` REAL NOT NULL DEFAULT 0,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `fk_orders_clients1_idx` (`client_id` ASC) VISIBLE,
  CONSTRAINT `fk_orders_clients1`
    FOREIGN KEY (`client_id`)
    REFERENCES `warehouse`.`clients` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `warehouse`.`materials`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`materials` (
  `material_id` INT NOT NULL AUTO_INCREMENT,
  `material_title` TEXT NOT NULL,
  `material_price` REAL NULL,
  `material_count` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`material_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `warehouse`.`supplies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`supplies` (
  `supply_id` INT NOT NULL AUTO_INCREMENT,
  `supply_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `supply_amount` REAL NOT NULL DEFAULT 0,
  PRIMARY KEY (`supply_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `warehouse`.`orders_has_materials`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`orders_has_materials` (
  `order_id` INT NOT NULL,
  `material_id` INT NOT NULL,
  `count` INT NOT NULL,
  `price` REAL NOT NULL,
  PRIMARY KEY (`order_id`, `material_id`),
  INDEX `fk_orders_has_materials_materials1_idx` (`material_id` ASC) VISIBLE,
  INDEX `fk_orders_has_materials_orders1_idx` (`order_id` ASC) VISIBLE,
  CONSTRAINT `fk_orders_has_materials_orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `warehouse`.`orders` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_orders_has_materials_materials1`
    FOREIGN KEY (`material_id`)
    REFERENCES `warehouse`.`materials` (`material_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `warehouse`.`supplies_has_materials`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`supplies_has_materials` (
  `supply_id` INT NOT NULL,
  `material_id` INT NOT NULL,
  `count` INT NOT NULL,
  `price` REAL NOT NULL,
  PRIMARY KEY (`supply_id`, `material_id`),
  INDEX `fk_supplies_has_materials_materials1_idx` (`material_id` ASC) VISIBLE,
  INDEX `fk_supplies_has_materials_supplies1_idx` (`supply_id` ASC) VISIBLE,
  CONSTRAINT `fk_supplies_has_materials_supplies1`
    FOREIGN KEY (`supply_id`)
    REFERENCES `warehouse`.`supplies` (`supply_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_supplies_has_materials_materials1`
    FOREIGN KEY (`material_id`)
    REFERENCES `warehouse`.`materials` (`material_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `warehouse` ;

-- -----------------------------------------------------
-- Placeholder table for view `warehouse`.`orders_list`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `warehouse`.`orders_list` (`order_id` INT, `order_time` INT, `order_amount` INT, `client_id` INT, `client_name` INT);

-- -----------------------------------------------------
-- procedure order_create
-- -----------------------------------------------------

DELIMITER $$
USE `warehouse`$$
create procedure `order_create` (in `_client_id` int, out `_order_id` int)
begin
	insert into `orders` (`client_id`) values (`_client_id`);
    select last_insert_id() into `_order_id`;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure order_add_item
-- -----------------------------------------------------

DELIMITER $$
USE `warehouse`$$
create procedure `order_add_item` (in `_order_id` int, in `_material_id` int, in `_material_count` int)
begin
	select `material_price` into @price from `materials` where `material_id` = `_material_id`;
    insert into `orders_has_materials` (`order_id`, `material_id`, `count`, `price`) values (`_order_id`, `_material_id`, `_material_count`, @price);
    update `orders` set `order_amount`=`order_amount` + (@price * `_material_count`) where `order_id` = `_order_id`;
    update `materials` set `material_count`=`material_count` - `_material_count` where `material_id` = `_material_id`;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure supply_create
-- -----------------------------------------------------

DELIMITER $$
USE `warehouse`$$
create procedure `supply_create` (out `_supply_id` int)
begin
	insert into `supplies` () values ();
    select last_insert_id() into `_supply_id`;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure supply_add_item
-- -----------------------------------------------------

DELIMITER $$
USE `warehouse`$$
create procedure `supply_add_item` (in `_supply_id` int, in `_material_id` int, in `_material_count` int, in `_material_price` real)
begin
	insert into `supplies_has_materials` (`supply_id`, `material_id`, `count`, `price`) values (`_supply_id`, `_material_id`, `_material_count`, `_material_price`);
    update `materials` set `material_count`=`material_count` + `_material_count` where `material_id` = `_material_id`;
    update `supplies` set `supply_amount`=`supply_amount` + (`_material_price` * `_material_count`) where `supply_id` = `_supply_id`;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- View `warehouse`.`orders_list`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `warehouse`.`orders_list`;
USE `warehouse`;
create  OR REPLACE view `orders_list` as
select
    `o`.`order_id`,
    `o`.`order_time`,
    `o`.`order_amount`,
    `o`.`client_id`,
    `c`.`client_name`
from `orders` as `o`
inner join `clients` as `c`
    on `c`.`client_id` = `o`.`client_id`
order by `o`.`order_time` desc;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
